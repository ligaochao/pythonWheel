from tkinter import *
import os
import tkinter.filedialog
from os import path
# import windnd
import json
from jinja2 import Environment, FileSystemLoader
import pyperclip
import pyautogui
import pandas as pd
from tkinter.filedialog import askdirectory
# from PIL import ImageTk,Image
import easygui as g
import pymysql
import configparser
import linecache
import difflib
import sys
import json
import itertools
import calendar;
import time;

mylist=("".join(x) for x in itertools.product("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",repeat=6))

root = Tk()
root.title('模板生成工具')
txt = tkinter.Text(root,height = 20,width=20)
"""
功能：获取某字符串两子字符串之间的内容
作者:李高超
创建日期：2018-07-05 17:22:24
入参：
  pendingString：原始字符串
  startCharacter：开始子字符串
  endCharacter：结束子字符串
出参：子字符串之间的内容
"""
def  getTheContentBetweenTwoCharacters(pendingString, startCharacter, endCharacter):
	targetString = ''
	startPosition = pendingString.find(startCharacter)
	endPosition = pendingString.find(endCharacter)
	if startPosition >-1 and endPosition >-1 and startPosition < endPosition:
		targetString = pendingString[startPosition+1:endPosition]
	return targetString



def open1():
    filename = tkinter.filedialog.askopenfilename()
    if filename != '':
        # print(filename)
        e_keyword.delete('0.0',END)
        e_keyword.insert('0.0',filename)
    else:
        print('no')


def open2():
    filename = tkinter.filedialog.askopenfilename()
    if filename != '':
        # print(filename)
        e_keyword1.delete('0.0',END)
        e_keyword1.insert('0.0',filename)
    else:
        print('no')

def open3():
    # filename = tkinter.filedialog.askopenfilename()
    path_ = askdirectory()
    filename = path_ 
    if filename != '':
        # print(filename)
        e_keyword2.delete(0,END)
        e_keyword2.insert(0,filename)
    else:
        print('no')

#处理excel数据源
def get_by_excel(fileUrlData):
	df = pd.DataFrame(pd.read_excel(fileUrlData))
	da = df.to_dict(orient='records')
	return da

#处理csv数据源
def get_by_csv(fileUrlData):
	# print(fileUrlData)
	df = pd.read_csv(open(fileUrlData,encoding = "utf-8"))
	da = df.to_dict(orient='records')
	return da



def get_by_excel_l(fileUrlData):
	df = pd.DataFrame(pd.read_excel(fileUrlData))
	#da = df.to_dict(orient='records')
	return df.iteritems()

#处理csv数据源
def get_by_csv_l(fileUrlData):
	# print(fileUrlData)
	df = pd.read_csv(open(fileUrlData,encoding = "utf-8"))
	#da = df.to_dict(orient='records')
	return df.iteritems()


#处理txt数据源
# def  get_by_txt(fileUrlData):
# 	df = pd.read_csv(open(fileUrlData,encoding = "utf-8"))
# 	print(df)


"""
方法，下划线转小写
"""
def tohump(strD):
    strResult = ""
    try:
	    if strD != "" and strD.find('_')>-1:
	        strdList = strD.split("_")
	        for obj in strdList:
	            if obj != "":
	                if len(obj) > 1:
	                    strResult = strResult + obj[0].title()+obj[1:]
	                else:
	                    strResult = strResult + obj[0].title()
	        strResult = strResult[0].lower()+strResult[1:]
	    elif len(strD) > 1 and strD.find('_')  == -1:
	        strResult = strD[0].lower()+strD[1:]
	    elif len(strD) == 1 and strD.find('_')  == -1:
	        strResult = strD[0].lower()
	    else:
	        return strD
    except Exception as e:
    	return strD

    return  strResult


#取字符串中两个符号之间的东东
def txt_wrap_by(start_str, end, html):
	start = html.find(start_str)
	if start >= 0:
	    start += len(start_str)
	    end = html.find(end, start)
	    if end >= 0:
	        return html[start:end].strip()

#去掉两个字符之间的数据
def toJavaType(mysqlType):
	if mysqlType != None:
		try:
			mysqlType = str(mysqlType).replace("（","(").replace("）",")")
			mysqlType = mysqlType.replace(txt_wrap_by('(',')',mysqlType),"").replace("(","").replace(")","").strip()
		except Exception as e:
			print(e)
		
	if mysqlType == "varchar":
	    return "String"
	elif mysqlType == "int":
	    return "Integer"
	elif mysqlType == "decimal":
	    return "BigDecimal"
	elif mysqlType == "datetime":
	    return "Date"
	else:
	    return mysqlType

#数组去重
def  arrayWeightRemoval(strD):
	# newList = eval(strD)
	resultList = []
	for obj in strD:
		if obj not in resultList:
			resultList.append(obj)
	if resultList == []:
		return ""
	return str(resultList)


def  getSql(modelFile,dataFile,createFile):
	#这里获取模板文件信息
	fileUrl = modelFile
	fileCatalog = "/".join(fileUrl.split("/")[0:len(fileUrl.split("/"))-1])
	#这里获取数据文件信息
	fileUrlData = dataFile
	# print("模板一是："+str(fileUrlData))
	fileCatalog1 = "/".join(fileUrlData.split("/")[0:len(fileUrlData.split("/"))-1])
	# print("模板一是1："+str(fileCatalog1))
	#获取文件后缀名
	file_suffix_list = fileUrlData.replace(fileCatalog1,"").replace("/","").split(".")
	file_suffix = file_suffix_list[len(file_suffix_list)-1]
	#这个是循环变量数组
	propertys = []
	#这个是自定义变量数组
	variables = {}
	# print("后缀名为"+file_suffix)
	column_variable = []
	if file_suffix == "xlsx" or file_suffix == "XLSX":
		print("进入excel处理流程")
		propertys = get_by_excel(fileUrlData)
		column_variable = get_by_excel_l(fileUrlData)
		print("excel完成")
	if file_suffix == "csv" or file_suffix == 'txt':
		print("进入csv处理流程")
		propertys = get_by_csv(fileUrlData)
		column_variable = get_by_csv_l(fileUrlData)
		print("csv完成")
	# if file_suffix == 'txt':
	# 	print("进入txt处理流程")
	# 	propertys = get_by_txt(fileUrlData)
	# 	column_variable = get_by_txt_l(fileUrlData)
	# 	print("txt处理流程")

	#这里再新增一些特殊的方法处理，为每一个变量新增一些转换方法
	newList = []
	for obj in propertys:
		arr = obj.keys()
		objNew = {}
		for obj1 in arr:
			# print(obj.get(obj1))
			if str(obj.get(obj1)).strip() != "nan":
			#这个保存的是原来的值
				objNew[str(obj1)] = obj.get(obj1)
			else:
				objNew[str(obj1)] = ""
		newList.append(objNew)
	# print(newList)
	propertys =  newList

	new_colum = []
	#这里转义行变量
	# print(column_variable)
	for obj in column_variable:
		objdict = {}
		key = obj[0]
		listD = str(obj[1]).replace("Name: "+str(key)+"","").replace(", dtype: object","").replace(", dtype: object","").split(" ")
		newD = []
		for objD in listD:
			if objD.find("\n")>-1:
				# print(objD)
				newD.append("\n".join(objD.split("\n")[0:len(objD.split("\n"))-1]))
		
		value = newD
		objdict[key] = value
		column_variable = new_colum
		new_colum.append(objdict)
	column_variable = new_colum
	# print(column_variable)
	# print(fileUrl,fileCatalog)
	strJson = str(txt.get(0.,"end"))
	# if file_suffix == "xlsx" 
	file_separator = None
	try:
		variable_information = json.loads(strJson)
		#获取文件内容的分割符（如果是excel或者sql的话，则不需要指定）
		file_separator = variable_information['separator']
		if file_separator != None and file_separator !="None":
			print("文件分割符"+file_separator)
		# additional_information = None
		variables = variable_information
	except Exception as e:
		print("11111111"+str(e))
	# fileName = fileUrlData.replace(fileCatalog1,"").replace("/","").replace("."+file_suffix,"")
	fileName = ".".join(file_suffix_list[0:len(file_suffix_list)-1])
	#这里可能存在风险，一般不会有
	modelFileName = modelFile.split("/")[len(modelFile.split("/"))-1].split(".")[0]
	index = 0
	# print(variables)
	# print("-----"+str(fileName.split("--")))
	for obj in fileName.split("--"):
		# print(obj)
		if obj != None:
			variables["_"+str(index)] = str(obj)
		index = index + 1


	#这里模板加载位置
	print("模板是:"+str(fileUrl.replace(fileCatalog,"").replace("/","")))
	#这里新增各类过滤器
	#1,获取驼峰数据结构
	env = Environment(loader = FileSystemLoader(fileCatalog))
	env.lstrip_blocks = True
	env.trim_blocks = True
	env = addfliter(env)
	template = env.get_template(fileUrl.replace(fileCatalog,"").replace("/",""))
	# print(propertys)

	content = template.render(lv= propertys,ov = variables,cv = column_variable)
	if createFile != None and createFile.find("/") > -1:
		with open(createFile+"/"+fileName.split("--")[0]+"=="+modelFileName,"w",encoding = "utf-8") as f:
			f.write(content.replace("{ ","{").replace(" }","}"))
	else:
		#写入粘贴板
		pyperclip.copy(content.replace("{ ","{").replace(" }","}").replace('@@@@','"').replace("&&&&",","))
		#提示框，弹出框
		pyautogui.alert(text='处理成功，ctrl+v获取结果',title='',button='OK') 


# 对文件的操作
def func(ls):
    e_keyword.delete(0,END)
    for i in ls:
        e_keyword.insert("end",i.decode("gbk")+'\n')

def func1(ls):
    e_keyword1.delete(0,END)
    for i in ls:
        e_keyword1.insert("end",i.decode("gbk")+'\n')

   
def listdir(path,list_name):  #传入存储的list
    for file in os.listdir(path):
        file_path = os.path.join(path, file)  
        if os.path.isdir(file_path):  
            listdir(file_path, list_name)  
        else:
            list_name.append(file_path.replace("\\","/"))

# print(listdir("C:\\Users\\ligc\\Desktop\\脚本\\个人脚本\\个人脚本大整理\\兴趣\\小工具集合", strd))
# print(strd)
def  openDB():
	msg = "请输入数据库连接信息"
	title = "请输入sql语句"
	user_info = []
	#先经过默认配置的信息，然后再考虑手动添加

	config=configparser.ConfigParser()
	config.read('D:\\jinjia\\connection.ini',encoding = "utf-8")
	# print(config.sections())
	result = g.choicebox(msg="请选择默认连接方式，手动输入请点cancel",title="",choices=config.sections())
	# print(result)
	if result == None:
		user_info = g.multenterbox(msg,title,("连接方式","sql语句"))
	else:
		user_info.append(config[result]["connection"])
		user_info.append(config[result]["sql"])
		
		print(user_info) 
	fistD = user_info[0].replace("//","/").split("/")
	user = fistD[1].split(":")[0]
	passwd = fistD[1].split(":")[1].split("@")[0]
	host = fistD[1].split(":")[1].split("@")[1]
	port = fistD[1].split(":")[2]
	db = fistD[2].split("?")[0]
	print(user,passwd,host,port,db)
	connection = pymysql.connect(host=host
	                       , port=int(port)
	                       , db=db
	                       , user=user
	                       , passwd=passwd
	                       , charset='utf8'
	                       ,use_unicode=True)
	sql = user_info[1] 
	df = pd.read_sql(sql,connection)
	df.to_csv(path_or_buf="D:\\jinjia\\data\\DBFile.txt", index=False) # 写入csv文件
	# e_keyword.delete("")
	e_keyword.delete('0.0',END)
	e_keyword.insert('0.0',"D:/jinjia/data/DBFile.txt")
	# print(df.iteritems())

def main():
 	modelFile = str(e_keyword1.get(0.0,'end')).strip().replace("\\","/")
 	print(modelFile)
 	if modelFile.find("{{")  != -1  or modelFile.find("{%") != -1:
 		with open("D:\\jinjia\\model\\modelFile.txt","w",encoding = "utf-8") as f:
 			f.write(modelFile)
 		modelFile = "D:/jinjia/model/modelFile.txt"
 	dataFile = str(e_keyword.get(0.0,'end')).strip().replace("\\","/")
 	dataFile = dataFile.replace('"',"@@@@").replace(",","&&&&")
 	if dataFile.find(".") == -1 or dataFile.find("/") ==-1:
 		with open("D:\\jinjia\\data\\dataFile.txt","w",encoding = "utf-8") as f:
 			for index in range(0,5):
 				dataFile = dataFile.replace("\t\t","\t")
 			dataFile = dataFile.replace("\t",",")
 			f.write(dataFile)
 		dataFile = "D:/jinjia/data/dataFile.txt"
 	createFile = str(e_keyword2.get()).strip().replace("\\","/")
 	if createFile.find("/") == -1 and createFile.find("\\") == -1:
 		getSql(modelFile,dataFile,None)
 	else:
 		modelList = []
 		try:
 			modelCatalog = "/".join(modelFile.split("/")[0:len(modelFile.split("/"))-1])
 			listdir(modelCatalog, modelList)
 		except Exception as e:
 			modelList.append("D:\\jinjia\\model\\modelFile.txt")
 			print(e)

 		dataCatalog = "/".join(dataFile.split("/")[0:len(dataFile.split("/"))-1])
 		dataList = []
 		listdir(dataCatalog, dataList)
 		print(dataList)
 		for obj in dataList:
 			for obj1 in modelList:
 				print(obj,obj1,createFile)
 				try:
 					getSql(obj1,obj,createFile)
 				except Exception as e:
 					print(e)
 				
 		os.startfile(createFile)

def  modelFilter():
	config=configparser.ConfigParser()
	config.read('D:\\jinjia\\filterConf.ini',encoding = "utf-8")
	print(config)
	aLiLsit =[]
	# names = []
	for obj in config.sections():
		aLiLsit.append(config[obj]["explain"]+"---"+obj)
		# names.append(obj)

	result = g.choicebox(msg="请选择默认连接方式，手动输入请点cancel",title="",choices=aLiLsit)
	print(result)
	if result != None:
		#提示框，弹出框
		#choice = pyautogui.confirm(text=config[result]["explain"],title='查看内容为',buttons=["ok","直接运行","cancel"])
		choice = "直接运行"
		result = result.split("---")[1]
		# choice = pyautogui.alert(text=config[result]["explain"],title='',button=["cancel","ok"]) 
		if choice.find("cancel") > -1:
			modelFilter()
		if choice.find("直接运行")>-1:
			#获取粘贴板内容
			try:
				sentence = pyperclip.paste()
				print("获得的变量"+str(sentence))
				lastR = eval(result)(sentence)
				pyperclip.copy(lastR )
				choice = pyautogui.alert(text="执行完成",title='',button="OK") 
			except Exception as e:
				choice = pyautogui.alert(text=str(e),title='',button="OK") 
				# raise e
		else:
			pyperclip.copy(result)
			
		#写入粘贴板
		

		# print(choice)

		

		
# image2 =Image.open(r'D:\\jinjia\\123.gif')
# background_image = ImageTk.PhotoImage(image2)
# w = background_image.width()
# h = background_image.height()
# root.geometry("300x400")
# # root.geometry('%dx%d+0+0' % (w,h))
# background_label = Label(root, image=background_image)
# background_label.place(x=0, y=0, relwidth=1, relheight=1)
root.geometry("400x600+1500-400")
# root.geometry("300x400")
root.resizable(width=True, height=True)
l_result =Label(root,text='数据文件或内容')
l_result.grid(row=1,sticky=W)
e_keyword =Text(root,width = 20,height = 2)
e_keyword.grid(row=1,column=1,sticky=E)
# 第二行，密码标签及输入框
b_login2 = Button(root,text='查找',command=open1)
b_login2.grid(row=1,column=2)
b_login2 = Button(root,text='数据库',command=openDB)
b_login2.grid(row=1,column=3)



l_result1 =Label(root,text='模板文件或内容')
l_result1.grid(row=2,sticky=W)
e_keyword1 =Text(root,width = 20,height = 2)
e_keyword1.grid(row=2,column=1,sticky=E)
# 第二行，密码标签及输入框
b_login3 = Button(root,text='查找',command=open2)
b_login3.grid(row=2,column=2)
b_login3 = Button(root,text='过滤器',command=modelFilter)
b_login3.grid(row=2,column=3)



l_result2 =Label(root,text='输出文件夹')
l_result2.grid(row=3,sticky=W)
e_keyword2 =Entry(root,width = 20)
e_keyword2.grid(row=3,column=1,sticky=E)
# 第二行，密码标签及输入框
b_login4 = Button(root,text='查找',command=open3)
b_login4.grid(row=3,column=2)

l_result =Label(root,text='变量定义区')
l_result.grid(row=4,sticky=W)

txt_default_value = ''' 
{
 "separator":",",
 "自定义键":"自定义值"
}
'''
txt.insert(0.,txt_default_value)
txt.grid(row=4,column=1)
b_login3 = Button(root,text='生成结果',command=main)
b_login3.grid(row=5,column=1)

# windnd.hook_dropfiles(e_keyword.winfo_id(),func)
# windnd.hook_dropfiles(e_keyword1.winfo_id(),func1)	

#在这边写新的方法
def  xmlSpecialCharacterConversion(obj):
	obj = obj.replace("&","&amp;")
	obj = obj.replace("<","&lt;")
	obj = obj.replace(">","&gt;")
	obj = obj.replace('"',"&quot;")
	obj = obj.replace("'","&apos;")
	return obj
#首字母大写
def firstTitle(obj):
	try:
		return obj[0].title()+obj[1:]
	except Exception as e:
		pass
	return obj

#首字母小写
def firstlower(obj):
	try:
		return obj[0].lower()+obj[1:]
	except Exception as e:
		pass
	return obj

#读取指定行文件
def get_line_context(file_path, line_number):
	return linecache.getline(file_path, line_number).strip()

#获取接口的方法
def  interfaceDecoding(obj):
	try:
		#要查找的集合
		fileList = [
		  'E:\\java\\iot\\portal-srv\\target\\bwae\\srv-api\\META-INF\\js\\bwaerpc-i.js',
		  'E:\\java\\im\\resource-mgr\\target\\bwae\\srv-api\\META-INF\js\\bwaerpc-i.js'
		]
		
		for fileUrl in fileList:
			index = 1
			with open(fileUrl,"r+",encoding="utf-8") as f:
				for line in  f:
					if line != None and line.find(obj)>-1:
						print(line,index)
						content = get_line_context(fileUrl,index - 2)
						print(content)
						return content 
					index = index + 1
		return obj
	except Exception as e:
		print(e)
	return obj

#获取接口的方法
def  interfaceCoding(obj):
	try:
		#要查找的集合
		fileList = [
		  'E:\\java\\iot\\portal-srv\\target\\bwae\\srv-api\\META-INF\\js\\bwaerpc-i.js',
		  'E:\\java\\im\\resource-mgr\\target\\bwae\\srv-api\\META-INF\js\\bwaerpc-i.js'
		]
		
		for fileUrl in fileList:
			index = 1
			with open(fileUrl,"r+",encoding="utf-8") as f:
				for line in  f:
					if line != None and line.find("."+obj+" =")>-1:
						print(line,index)
						content = get_line_context(fileUrl,index + 2)
						print(content)
						return content 
					index = index + 1
		return obj
	except Exception as e:
		print(e)
	return obj
#拼接fileHub文件
def  getFileHub(obj):
	modelUrl = "https://bwae.bwae.org/filehub/v1/projects/【A】/files/【B】/access?accesstoken=【C】"
	accessToken = obj.split('"accessToken":')[1].split(",")[0].replace('"',"")
	fileId_A = obj.split('"fileId":')[1].split(",")[0].replace('"',"").split('/')[0]
	fileId_B = obj.split('"fileId":')[1].split(",")[0].replace('"',"").split('/')[1]
	resultUrl = modelUrl.replace("【A】",fileId_A).replace("【B】",fileId_B).replace("【C】",accessToken)
	return resultUrl
# print(resultUrl)

#格式化Json
def  getFormatJson(modelUrl):
	firstAction = modelUrl.replace("{","{\n")
	firstAction = firstAction.replace("[","[\n")
	firstAction = firstAction.replace(",",",\n")
	firstAction = firstAction.replace("}","\n}")
	firstAction = firstAction.replace("]","\n]")
	# print(firstAction)
	actinSpace = " "
	index = 0
	strResult = ""
	for obj in firstAction.split("\n"):
		if obj.find("}") > -1 or obj.find("]")> -1:
			strResult = strResult + actinSpace*(index-2) + obj + "\n"
		else:
			strResult = strResult + actinSpace*index + obj + "\n"
		
		if obj.find("{")>-1:
			index = index + 2
			#actinSpace = actinSpace*index
		if obj.find("}")>-1:
			index = index - 2
	return  strResult

#文件对比层
def  getFileCompare(obj):
	print(obj)
	obj = obj.replace("\r","\n").replace("\t","\n")
	strConten = ""
	for t in obj.split("\n"):
		if t.replace("\n","") != "":
			strConten = strConten + t+"\n"

	firstA = strConten.split("###")[0]
	firstB = strConten.split("###")[1]
	d = difflib.HtmlDiff()
	text1_lines = firstA.splitlines()
	text2_lines = firstB.splitlines()
	stdResult = d.make_file(text1_lines, text2_lines)
	with open("diff.html","w",encoding="utf-8") as f:
		f.write(stdResult)
	os.startfile("diff.html")
	return stdResult


#全部大写
def getAllBig(obj):
	try:
		return obj.upper()
	except Exception as e:
		pass
	return obj


#这里把URL的解析放进去
def getUrlChange(obj):
	try:
		if obj.find("\\")>-1:
			return obj.replace("\\","\\\\")
	except Exception as e:
		print(e)
	return obj


def print_all_file_path(init_file_path):
	alist = []
	for root,dirs,files in os.walk(init_file_path):
		for file in files:
			fileUrl = os.path.join(root,file)
			if fileUrl.find(".java")>-1:
					alist.append(fileUrl)
			# print(os.path.join(root,file))
	return alist

def getObjectJson(fileUrl,strContent,fileUrlList,fileNameList,flagObjOrList):
	# print(fileUrl)
	filepath,fullflname = os.path.split(fileUrl)
	contentList = []
	lastFlag = False #这个是完结标识
	with open(fileUrl,"r+",encoding="utf-8") as f:
		for obj in f:
			if obj.find(";")>-1 and obj.find("static") == -1 and obj.find("//") == -1 :
				if obj.find("private") > -1 or obj.find("protected")>-1:
					contentList.append(obj)
	index = 0
	for obj in contentList:
		if index == len(contentList)-1:
			lastFlag = True

		objList = obj.split(" ")
		reaList = []
		for obj1 in objList:
			obj1 = obj1.replace("\t","").replace("\n","").replace(";","")
			if obj1 != "":
				reaList.append(obj1)
		if len(reaList) == 3:
			if reaList[1] in ["String","Date"]:
				strContent = strContent + '"'+reaList[2]+'":"'+reaList[1]+'",\n'
			elif reaList[1] in ["Integer","Long","Boolean"]:
				strContent = strContent +'"'+reaList[2]+'":'+reaList[1]+',\n'
			else:
				arrAyName = reaList[1]+".java" 
				if reaList[1]+".java" in fileNameList:
					strContent = strContent +'"'+reaList[2]+'":{\n'
					strContent = getObjectJson(fileUrlList[fileNameList.index(arrAyName)]+"\\"+arrAyName,strContent,fileUrlList,fileNameList,flagObjOrList)
				arrAyName = reaList[1].replace("List<","").replace(">","")+".java"
				if reaList[1].find("List<") > -1  and arrAyName in fileNameList:
					strContent = strContent +'"'+reaList[2]+'":[{\n'
					strContent = getObjectJson(fileUrlList[fileNameList.index(arrAyName)]+"\\"+arrAyName,strContent,fileUrlList,fileNameList,"\n}],\n")
			if lastFlag:
				strContent = strContent[0:len(strContent)-2] + flagObjOrList
		index = index + 1
	return strContent



#这里根据java文件生成java json对象，用于构建请求体来模拟发送参数
def getDataJson(fileUrl):
	filepath,fullflname = os.path.split(fileUrl)
	if fileUrl.find("\\src\\")> -1:
		filepath = filepath.split("\\src\\")[0]
	if fileUrl.find("/src/")> -1:
		filepath = filepath.split("/src/")[0]

	# print(filepath)
	fileNameList = []  # 专门记录文件的名字
	fileUrlList = []  # 专门记录文件的路径
	strContent = "{\n"
	allFilelist = print_all_file_path(filepath)
	# print(allFilelist)
	for obj in allFilelist:
		path,name = os.path.split(obj)
		fileUrlList.append(path)
		fileNameList.append(name)

	flagObjOrList = "\n},\n"

	strd = getObjectJson(fileUrl,strContent,fileUrlList,fileNameList,flagObjOrList)
	strd = strd[0:len(strd)-2]
	strd = strd.replace(":Integer",":0")
	strd = strd.replace(":Boolean",":true")
	return strd


def get_dictkeys(dic, find_key,key_value):
	if isinstance(dic,dict) == False:
		dic = json.loads(strd)
	find_value = 'no'
	for key, value in dic.items():
		# print(key, value)
		# if key == "lastWarnTime":
		# 	print("111111111"+value)
		if value == "Date":
			dic[key] = ts
		if key == find_key:
			find_value = value
				# print("11111---"+str(key_value)+"---"+str(value))
			#这里做一下类型判断，传进来的可能都是字符串，但还是要校验
			if value == 0 or value == 1:
				dic[key] = int(key_value)
			elif  value == True or value == False:
				if find_key == "warnType":
					print(dic)
					print("1111"+str(value))
				if key_value == "true":
					dic[key] = True
				else:
					dic[key] = False
			if key_value == "String":
				dic[key] = next(mylist)
		elif isinstance(value, list):
			for obj in value:
				for key1, value1 in obj.items():
					if key1 == find_key:
						find_value = value1
						obj[key1] = key_value
					elif isinstance(value1, dict):
						find_value = get_dictkeys(value1, find_key,key_value)
		elif isinstance(value, dict):
			find_value = get_dictkeys(value, find_key,key_value)
	if find_value == 'no':
		return 'dict doesnt have this key'
	else:
		return find_value


def  getTest(strd,realObject):
	"""
	{% for l in lv %}
		N--1####AAAA####post####BBBB####CCCC####点击过财务审核####l.参数####None####None####JSESSIONID=DDDD####
	{% endfor %}
	"""
	resultS = ""
	strd = strd.replace("，",",").replace("“",'"').replace("：",":").replace('”','"').replace("【","[").replace("】","]")
	# print(strd)
	dic = json.loads(strd)
	allList = []
	keyList = []
	for key, value in dic.items():
		keyList.append(key)
		allList.append(value)
	# print(allList)
	touList = []
	getPlans(allList,touList)
	# print(touList)
	for obj in touList:
		testObject = realObject
		taskList = []
		if obj != None:
			for index in range(0,len(obj)):
				#这里处理一下相关性变脸
				if keyList[index].find("---")>-1:
					charVs = keyList[index].split("---")
					chards = obj[index].split("---")
					# print(chards)
					for index1 in range(0,len(charVs)):
						# print(charVs[index1],chards[index1])
						get_dictkeys(testObject,charVs[index1],chards[index1])
				else:
					# print(keyList[index],obj[index])
					get_dictkeys(testObject,keyList[index],obj[index])
				taskList.append(str(keyList[index])+"="+str(obj[index]))
		noRepeatList = []
		resultD = {"alertManageReq":{}
		}
		if str(taskList) not in noRepeatList:
			noRepeatList.append(str(taskList))
			resultD["alertManageReq"] = testObject
			resultS = resultS + json.dumps(resultD) + "\n"

	return resultS	



def getPlans(lis,listResult,jude=True):
	
	if jude: lis = [[[i] for i in lis[0]]] + lis[1:]
	if len(lis) > 2:
	    for i in lis[0]:
	        for j in lis[1]:
	            getPlans([[i + [j]]] + lis[2:],listResult, False)
	elif len(lis) == 2:
	    for i in lis[0]:
	        for j in lis[1]:
	        	listResult.append(i + [j])


#这里生成模拟的测试用例
def  getTestCases(obj):
	fileUrl = obj.split("###")[0]
	data = obj.split("###")[1]
	# print(fileUrl,data)
	ts = calendar.timegm(time.gmtime())
	strd = getDataJson(fileUrl.replace("\r","").replace("\n",""))
	strd = strd.replace(':"Date',':"'+str(ts)+'')
	realObject = json.loads(strd)
	strR = getTest(data,realObject)
	return strR



#在这里添加自定义的过滤器

def  addfliter(env):
	env.filters['tohump'] = tohump
	env.filters['toJavaType'] = toJavaType
	env.filters['arrayWeightRemoval'] = arrayWeightRemoval
	env.filters['firstTitle'] = firstTitle
	env.filters['firstlower'] = firstlower
	env.filters['interfaceDecoding'] = interfaceDecoding
	env.filters['interfaceCoding'] = interfaceCoding
	env.filters['getFileHub'] = getFileHub
	env.filters['getFormatJson'] = getFormatJson
	env.filters['getFileCompare'] = getFileCompare
	env.filters['getAllBig'] = getAllBig
	env.filters['getUrlChange'] = getUrlChange
	env.filters['getDataJson'] = getDataJson
	env.filters['getTestCases'] = getTestCases
	return  env
getUrlChange
# root.configure(background="black")
root.wm_attributes('-topmost',1)
 
root.mainloop()





# from jinja2 import Environment, FileSystemLoader

# env = Environment(loader = FileSystemLoader("./templates"))
# template = env.get_template("test.txt")  
# propertys = []
# objD = {"name":"123"}
# propertys.append(objD)
# content = template.render(propertys = propertys)

# with open('./test.conf','w') as fp:
# 	fp.write(content)
